import java.util.Scanner;

public class Converter
{
	public static String formatInfix(String infix)
	{
		return infix;
	}
	public static  String convertInfixToPostfix(String infix) throws StackUnderflow
	 {
		 String postfix="";									//creates a string to hold the postfix expression
		 Stack stack = new Stack();							//creates a new stack for the program to use for converting
		 String propInfix = formatInfix(infix);				//uses the format method to stick the infix in proper notation for the convert method to run
		 Scanner scan = new Scanner(propInfix);				//creates a scanner to traverse the infix expression input by the user
		 String token = "";									//holds the current characters being considered by the converter
		 
		 while(scan.hasNext())								//while there are still characters left in the string
		 {
			 token = scan.next();

			if	 (token=="+"||token=="-"	//if the next token is an operand it will run the Operator method
				||token=="x"||token=="/"
				||token=="%"||token=="^"
				||token=="<"||token==">")
			{
				postfix = processOperator(token,stack, postfix);
			}
			else if(token=="("||token=="["||token=="{") stack.push(token);							//if the token is a left parenthesis then it will push it onto the stack
			else if(token==")"||token=="]"||token=="}") postfix=rightParan(token, postfix, stack);	//if the token is a right parenthesis then it will run the apropriate method

			//if nothing above runs then the token is an integer and it is appended to the postfix expression
			else{
					stack.push(token);
					postfix += token + " ";			//casts the integer to a string and appends it to the postfix expression
		 		}
			 //		 token = "";
		 }
		 
		 /*
		  * once everything has been pushed onto the stack
		  * top and pop it off so that it can be placed in the postfix representation
		  */
		 scan.close(); 
		 return postfix;
	 }

	private static  String rightParan(String token, String postfix, Stack stack) throws StackUnderflow
	{
		Object topToken = stack.top();
		while(!(topToken=="("||topToken=="["||topToken=="{"))
		{
			postfix += topToken;
			stack.pop();
			topToken = ""+stack.top();
		}
		stack.pop();
		return postfix;
	}
	
	private static  String processOperator(String token, Stack stack, String postfix) throws StackUnderflow
	{
		Object topToken = stack.top();
		while(!stack.isEmpty() && 
				!(stack.top()=="("||stack.top()=="["||stack.top()=="{"))
		{
			stack.pop();
			postfix += topToken;
			topToken = "" + stack.top();
		}
		stack.push(token);
		return postfix;
	}

}
