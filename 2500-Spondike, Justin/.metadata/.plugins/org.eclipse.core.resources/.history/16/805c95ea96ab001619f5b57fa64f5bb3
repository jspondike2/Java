
public class HashTableListDefault implements HashTableList
{
/* This is an application of hash Tables using our already constructed
 * text file reader program. It will parse the list as usual, and when
 * sorting the words, it will rely on the Hash Function in order to 
 * properly place the word in its location. (This is an array based
 * collection of Linked lists.)
 */
	
	WordNode[] list;
	int hashLocation; 			//variable to hold the location of the previous Hash Location, so once found, it doesn't have to re-hash the input
	
	public boolean contains(String x)
	{
		//Each Hash Table list is going to be unique depending on the function. So find is going to vary
		System.out.println("\"Find()\" must be implemented depending on Hash Function.");
		return false;
	}
	public void add(String x)
	{
		/* Adds words to the list of the specified Hash location
	 	 * in the same manner as the Unsorted Linked List.
	 	 */
		WordNode node = new WordNode(x, list[hashLocation]);		//creates a new node which holds the word (String text) and a link to the front of the list (WordNode list) within the array's location
		list[hashLocation]=node;									//sets the front of the location's list to the new node
	}
	public void print()
	{
		/* This will print out the first 100 words in the
		 * Hash table. It will begin with the array's index
		 * at 0, and will increment everytime it reaches a
		 * null reference. Each time it comes upon a new 
		 * reference in the array (a new index) it will 
		 * traverse that list (located in the index) until
		 * it reaches the (default)maximum of 100 words.
		 */
		
		int numOfWords = 100;
		WordNode printLocation = list[0];
		
		System.out.println("The first "+numOfWords+" words in the Hash Table are: \n");
		
		for(int i = 0; i < list.length; i++)
		{
			
		}
	}
}
